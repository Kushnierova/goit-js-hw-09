{"mappings":"YAAA,IAAMA,EAASC,SAASC,cAAc,SAOd,SAAfC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAdPL,EAAOa,iBAAiB,UAsBsB,SAAxBC,GACpBA,EAAMC,iBAEN,IAAMC,EAAQF,EAAMG,OAAOZ,MACrBa,EAAOJ,EAAMG,OAAOC,KACpBC,EAASL,EAAMG,OAAOE,OAExBC,EAAUC,SAASL,EAAMM,OACzBC,EAASF,SAASH,EAAKI,OACZD,SAASF,EAAOG,OAC/B,GAAIC,EAAS,GAAGH,EAAQ,EAEtBI,MAAM,kCAGN,IAAK,IAAIC,EAAI,EAAGA,EAAIN,EAAOG,MAAOG,IAChCtB,EAAcsB,EAAE,EAAGL,GAChBM,MAAK,SAAAC,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MACjBuB,QAAQC,IAAI,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAE3D0B,OAAM,SAAAJ,G,IAAGvB,EAAQuB,EAARvB,SAAUC,EAAKsB,EAALtB,MAClBuB,QAAQC,IAAI,sBAAqCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAE3De,GAAWG,EAGfvB,EAAOgC,O","sources":["src/js/03-promises.js"],"sourcesContent":["const formEl = document.querySelector('.form')\n\nformEl.addEventListener('submit', handleSubmit);\n// Напиши скрипт, який на момент сабміту форми викликає функцію createPromise(position, delay)\n// стільки разів, скільки ввели в поле amount. Під час кожного виклику передай їй номер\n// промісу (position), що створюється, і затримку, враховуючи першу затримку (delay),\n// введену користувачем, і крок (step).\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n// Доповни код функції createPromise таким чином,\n// щоб вона повертала один проміс, який виконується або відхиляється через delay часу.\n// Значенням промісу повинен бути об'єкт, в якому будуть властивості position і delay\n// зі значеннями однойменних параметрів. Використовуй початковий код функції для вибору того,\n//  що потрібно зробити з промісом - виконати або відхилити.\nfunction handleSubmit(event) {\n  event.preventDefault();\n\n  const delay = event.target.delay;\n  const step = event.target.step;\n  const amount = event.target.amount;\n\n  let delayEl = parseInt(delay.value);\n  let stepEl = parseInt(step.value);\n  let amountEl = parseInt(amount.value);\n  if (stepEl < 0||delayEl<0) {\n\n    alert('Please put positive value')\n  }\n  else {\n    for (let i = 0; i < amount.value; i++) {\n      createPromise(i+1, delayEl)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n      delayEl += stepEl;\n    }\n  }\n  formEl.reset();\n}"],"names":["$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","event","preventDefault","delay1","target","step","amount","delayEl","parseInt","value","stepEl","alert","i","then","param","console","log","concat","catch","reset"],"version":3,"file":"03-promises.3de6e4af.js.map"}